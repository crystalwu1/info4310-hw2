<html>
    <head>
        <meta charset="UTF-8">
        <script src="https://d3js.org/d3.v7.min.js"></script>
    </head>

    <!-- css styles -->
    <!-- styles taken from https://github.com/jeffrz/info4310-sp2022/blob/main/notes/22.02.07.notes.htm -->
    <style>
        .gridlines line {
            stroke: #bbb;
        }

        .gridlines .domain {
            stroke: none;
        }

        #scatterplot {
            float:left;
        }

    </style>

    <body>
        <!-- buttons -->
        <div id="wrapper" style="display:flex; margin: 2%;">
          <div  style="width: 70%; margin: 1%">
              <div id="title" style="width:100%; height:10%; margin-top: 2%; margin-bottom: 7%;">
                <h1> Title </h1>
                <h3> Lydia Kim (lmk225), Crystal Wu (cw683) </h3>
                <p> Description </p>
              </div>

              <div id="graph-wrapper" style="width:100%; height: 80%; display: flex; flex-wrap: wrap">
                  <div style="height: auto">
                    <h1>Scores vs. Distance</h1>
                    <!-- include low, med, and high -->
                    <svg id="edu_viz" height="350" width="500" style="margin-top:20px"></svg>
                    <div>
                      <b>Scores:</b>
                      <select id="scores_selectButton">
                          <option value="all">all</option>
                      </select>
                    </div>
                  </div>

                  <div>
                    <h1>Background vs. Distance</h2>
                    <svg id="bg_viz" height="350" width="500" style="margin-top:20px"></svg>
                    <div>
                      <b>Wages:</b>
                      <select id="wages_selectButton">
                          <option value="all">all</option>
                      </select>
                      <b>Income:</b>
                      <select id="income_selectButton">
                          <option value="all">all</option>
                      </select>
                    </div>
                  </div>
              </div>
              <div id="graph-wrapper" style="width:100%; height: 5%; display: flex;">
                <!-- legend for gender color -->
                <div id="legend"></div>
              </div>
        </div>
        <div id="side" style="width: 20%; height: 90%; margin: 3%">
            <h2 id="sideBarTitle">Among all students surveyed...</h2>
            <p id="home_header"></p>
            <p id="eth_header"></p>
            <svg id="eth_viz" height="300" width="300" style="margin:20px"></svg>
            <p id="ped_header"></p>
            <div id="ped_mouseover" />
            <svg id="ped_viz" height="100" width="400" style="overflow: visible;"></svg>
            <div id="my_dataviz"></div>
            <!-- <svg id="home_viz" height="200" width="200" style="margin:20px"></svg> -->
            <!-- <svg id="inc_viz" height="200" width="200" style="margin:20px"></svg> -->
        </div>


        <script>
            // build map
        const loadScatter = async function() {

                // create scatter
                const edu_scatter = d3.select("#edu_viz");
                const bg_scatter = d3.select("#bg_viz");
                const eth_scatter = d3.select("#eth_viz");
                const ped_scatter = d3.select("#ped_viz");

                // width of both scatter plots are the same, given that their sizes are the same
                // code inspired by prof rz's notes in https://jeffrz.github.io/info4310-sp2022/notes/22.02.07.notes.htm
                const width = edu_scatter.attr("width");
                const height = edu_scatter.attr("height");
                const margin =  {top: 40, right: 40, bottom: 40, left: 40};
                const chartWidth = width - margin.left - margin.right;
                const chartHeight = height - margin.top - margin.right;

                let edu_annotations = edu_scatter.append("g").attr("id","annotations");
                let edu_chartArea = edu_scatter.append("g").attr("id","points")
                    .attr("transform","translate("+margin.left+","+margin.top+")");

                let bg_annotations = bg_scatter.append("g").attr("id","annotations");
                let bg_chartArea = bg_scatter.append("g").attr("id","points")
                    .attr("transform","translate("+margin.left+","+margin.top+")");

                let eth_annotations = eth_scatter.append("g").attr("id","annotations");
                let eth_chartArea = eth_scatter.append("g").attr("id","ethpoints")
                    .attr("transform","translate("+margin.left+","+margin.top+")");
                let eth_filterArea = eth_scatter.append("g").attr("id","ethpoints_filter")
                    .attr("transform","translate("+margin.left+","+margin.top+")");
                let eth_outlineArea = eth_scatter.append("g").attr("id","ethpoints_outline")
                    .attr("transform","translate("+margin.left+","+margin.top+")");

                let ped_annotations = ped_scatter.append("g").attr("id","annotations");
                let ped_chartArea = ped_scatter.append("g").attr("id","points")
                    .attr("transform","translate("+5+","+margin.top+")");
                let ped_filterArea = ped_scatter.append("g").attr("id","points")
                    .attr("transform","translate("+5+","+margin.top+")");
                let ped_outlineArea = ped_scatter.append("g").attr("id","points")
                    .attr("transform","translate("+5+","+margin.top+")");

                // load dataset
                const college_csv = await d3.csv("CollegeDistance.csv");
                console.log(college_csv);

                let scores = []
                let backgr = []
                // filter dataset
                // change types as necessary
                college_csv.forEach((d, i) => {
                    d['score'] = Number(d['score']);
                    d['urban'] = Number(d['urban']);
                    d['unemp'] = Number(d['unemp']);
                    d['wage'] = Number(d['wage']);
                    d['distance'] = Number(d['distance']);
                    d['tuition'] = Number(d['tuition']);
                    d['education'] = Number(d['education']);
                    scores.push(Number(d['score']));
                    backgr.push(Number(d['wage']));
                });

                // remove rows where education is not twelve (exclude non-seniors)
                college_filtered = college_csv.filter((d) => d["education"] === 12 );
                console.log(college_filtered);

                // group income values
                // code found from https://github.com/d3/d3-array/blob/main/README.md#group
                let incomeKeys = Array.from(d3.group(college_filtered, d => d.income), ([key, value]) => (key));

                // add options to the income dropdown
                function createDropDown(selector, data, f) {
                    var options = d3.select(selector)
                    .selectAll('myOptions')
     	            .data(data)
                    .enter()
    	            .append('option')
                    .text(function (d) { return d; }) // text showed in the menu
                    .attr("value", f) // corresponding value returned by the button
                }

                // create extent
                const scoreExtent = d3.extent(college_filtered, d => d['score']);
                const scoreScale = d3.scaleLinear().domain(scoreExtent).range([0, chartWidth]);
                const wageExtent = d3.extent(college_filtered, d => d['wage']);
                const wageScale = d3.scaleLinear().domain(wageExtent).range([0, chartWidth]);
                const distanceExtent = d3.extent(college_filtered, d => d['distance']);
                // tried doing a log scale but didn't return valid numbers
                const distanceScale = d3.scaleLinear().domain(distanceExtent).range([chartHeight, 0]);

                //lm is 33%, mh 66%. use extent below for min/max
                scores_lm = (scoreExtent[1] - scoreExtent[0]) / 3 + scoreExtent[0]
                scores_mh = (scoreExtent[1] - scoreExtent[0]) / 3 * 2 + scoreExtent[0]
                backgr_lm = (wageExtent[1] - wageExtent[0]) / 3 + wageExtent[0]
                backgr_mh = (wageExtent[1] - wageExtent[0]) / 3 * 2+ wageExtent[0]

                console.log(scores_lm, scores_mh, backgr_lm, backgr_mh);

                // add options to scores, wages dropdown
                const quantile_names = ["low", "medium", "high"]
                var score_dict = {
                    "low": scores_lm,
                    "medium": scores_mh,
                    "high": scoreExtent[1]
                };
                var wage_dict = {
                    "low": backgr_lm,
                    "medium": backgr_mh,
                    "high": wageExtent[1]
                };

                createDropDown("#income_selectButton", incomeKeys, function (d) { return d; });
                createDropDown("#scores_selectButton", quantile_names, function (d) { return d; });
                createDropDown("#wages_selectButton", quantile_names, function (d) { return d; });
                var dropdownDict = {"#income_selectButton": "all", "#scores_selectButton": "all", "#wages_selectButton": "all"}

                // create custom color scale for gender
                var colors = ["red", "blue"];
                const colorScale = d3.scaleOrdinal().domain(["female", "male"]).range(colors);

                // create legend
                let legend = d3.select("div#legend");
                legend = legend.selectAll("div.row")
                    .data(colorScale.domain())
                    .enter()
                    .append("div")
                    .style("padding", 10)
                    .attr("class", "row");

                legend.append("svg").attr("width", 20).attr("height", 20)
                    .append("rect")
                    .attr('x', 0)
                    .attr('y', 2)
                    .attr("width", 18)
                    .attr("height", 18)
                    .attr("fill", colorScale);

                legend.append("text")
                    .attr("x", 20)
                    .attr("y", 20)
                    .attr("dy", ".35em")
                    .text(function (d) { return d+"\n"; });

                let leftAxis = d3.axisLeft(distanceScale)
                    .tickFormat(d3.format(""));
                let leftGridlines = d3.axisLeft(distanceScale)
                    .tickSize(-chartWidth-10)
                    .tickFormat("");
                let edu_bottomAxis = d3.axisBottom(scoreScale)
                    .tickFormat(d3.format("~f"));  // exact value without commas
                let edu_bottomGridlines = d3.axisBottom(scoreScale)
                    .tickSize(-chartHeight-10)
                    .tickFormat("");
                let bg_bottomAxis = d3.axisBottom(wageScale)
                    .tickFormat(d3.format("~f"));  // exact value without commas
                let bg_bottomGridlines = d3.axisBottom(wageScale)
                    .tickSize(-chartHeight-10)
                    .tickFormat("");

            // create axes and gridlines
            edu_annotations.append("g")
                .attr("class", "y axis")
                .attr("transform",`translate(${margin.left-10},${margin.top})`)
                .call(leftAxis);
            edu_annotations.append("g")
                .attr("class", "y gridlines")
                .attr("transform",`translate(${margin.left-10},${margin.top})`)
                .call(leftGridlines);
            edu_annotations.append("g")
                .attr("class", "x axis")
                .attr("transform",`translate(${margin.left},${chartHeight+margin.top})`)
                .call(edu_bottomAxis);
            edu_annotations.append("g")
                .attr("class", "x gridlines")
                .attr("transform",`translate(${margin.left},${chartHeight+margin.top})`)
                .call(edu_bottomGridlines);

            bg_annotations.append("g")
                .attr("class", "y axis")
                .attr("transform",`translate(${margin.left-10},${margin.top})`)
                .call(leftAxis);
            bg_annotations.append("g")
                .attr("class", "y gridlines")
                .attr("transform",`translate(${margin.left-10},${margin.top})`)
                .call(leftGridlines);
            bg_annotations.append("g")
                .attr("class", "x axis")
                .attr("transform",`translate(${margin.left},${chartHeight+margin.top})`)
                .call(bg_bottomAxis);
            bg_annotations.append("g")
                .attr("class", "x gridlines")
                .attr("transform",`translate(${margin.left},${chartHeight+margin.top})`)
                .call(bg_bottomGridlines);

            // add axis labels
            edu_chartArea.append("text")
                .attr("class", "x label")
                .attr("text-anchor", "middle")
                .style("font-size", 13)
                .attr("x", chartWidth/2)
                .attr("y", chartHeight + margin.top - 10)
                // .attr("transform", "translate(" + (chartWidth / 2) + " ," + (chartHeight - margin.bottom) + ")")
                .text("Test Scores");

            edu_chartArea.append("text")
                .attr("class", "y label")
                .attr("text-anchor", "end")
                .style("font-size", 13)
                .attr("x", margin.left - 100)
                .attr("y", -chartHeight/2 + margin.bottom + 65)
                .attr("transform", "rotate(-90)")
                .text("Distance (in 10 miles)");

            bg_chartArea.append("text")
                .attr("class", "x label")
                .attr("text-anchor", "middle")
                .style("font-size", 13)
                .attr("x", chartWidth/2)
                .attr("y", chartHeight + margin.top - 10)
                // .attr("transform", "translate(" + (chartWidth / 2) + " ," + (chartHeight - margin.bottom) + ")")
                .text("State Hourly Wage");

            bg_chartArea.append("text")
                .attr("class", "y label")
                .attr("text-anchor", "end")
                .style("font-size", 13)
                .attr("x", margin.left - 100)
                .attr("y", -chartHeight/2 + margin.bottom + 65)
                .attr("transform", "rotate(-90)")
                .text("Distance (in 10 miles)");

            //Side Bar Graphs
            var eth = {"hispanic": 0, "afam": 0, "other": 0}
            var inc = {"low": 0, "high": 0}
            var home = {"yes": 0, "no": 0}
            var ped = {"mom": 0, "dad": 0, "both": 0, "neither": 0}

            college_filtered.forEach((d, i) => {
                eth[d["ethnicity"]] += 1;
                inc[d["income"]] += 1;
                home[d["home"]] += 1;
                if (d["fcollege"] == "yes" && d["mcollege"] == "yes") {
                  ped["both"] += 1
                  ped["mom"] += 1
                  ped["dad"] += 1
                } else if (d["fcollege"] == "yes") {
                  ped["dad"] += 1
                } else if (d["mcollege"] == "yes") {
                  ped["mom"] += 1
                }
                else {
                  ped["neither"] += 1
                }
            });

            d3.select("#home_header").text(`${Math.round(home["yes"]/(home["no"]+home["yes"])*100)}% of their families own homes`)
            // side.append("br")
            // side.append("text").text(`${Math.round(inc["low"]/(inc["high"]+inc["low"])*100)}% have parents that attended college`)
            // side.append("text").text(`${Math.round(inc["low"]/(inc["high"]+inc["low"])*100)}% are from low income families`)

            //PARENT EDUCATION HORIZONTAL BAR CHART
            let one = ped["dad"] + ped["mom"] - ped["both"] - ped["both"]
            let both = ped["both"]
            let none = ped["neither"]
            let pedScale = d3.scaleLinear().domain([0,none + one + both]).range([0,ped_scatter.attr("width") - margin.left - margin.right])

            function ped_start(section) {
              if (section == "none") {
                return pedScale(0)
              } else if (section == "one") {
                return pedScale(none)
              } else {
                return pedScale(none + one)
              }
            }

            function ped_length(section, ped) {
              let one = ped["dad"] + ped["mom"] - ped["both"] - ped["both"]
              let both = ped["both"]
              let none = ped["neither"]
              if (section == "none") {
                return pedScale(none)
              } else if (section == "one") {
                return pedScale(one)
              } else {
                return pedScale(both)
              }
            }
            let ped_rect = ped_chartArea.selectAll("rect.all").data(["none", "one", "both"])
                .join("rect")
                .attr("class", "all")
                .attr("x", d => ped_start(d))
                .attr("y", 0)
                .attr("width", d => ped_length(d, ped))
                .attr("height", 50)
                .attr("fill", "coral")
                .attr("id", d => d);

            let ped_outlines = ped_outlineArea.selectAll("rect.outline").data(["none", "one", "both"])
                .enter()
                .append('rect')
                .attr("class", "outline")
                .attr("x", d => ped_start(d))
                .attr("y", 0)
                .attr("width", d => ped_length(d, ped))
                .attr("height", 50)
                .attr("fill-opacity", "0")
                .attr("stroke", 'black')
                .attr("id", d => d)
                .on("mouseover", function(d) {
                  d3.select(this)
                    .transition().duration(100)
                    .attr("stroke-width", 3)
                    hover.style("opacity", 1)

                })
                .on("mouseout", function(d) {
                  d3.select(this)
                    .transition().duration(100)
                    .attr("stroke-width", 1)
                    hover.style("opacity", 0)
                })

            const hover = d3.select("#ped_mouseover").append("div").style("opacity", 0)
            d3.select("#ped_header").text(`${Math.round((one + both)/Object.keys(college_filtered).length*100, 2)}% of students had one or more parents that attended college.`)
            const ped_fil_one = hover.append("text")
            const ped_fil_none = hover.append("text")
            const ped_fil_both = hover.append("text")


            //ETHNICITY BAR CHART
            ethdata = Object.entries(eth)

            let ethChartWidth = Number(eth_scatter.attr("width"))- margin.left - margin.right;
            let ethChartHeight = Number(eth_scatter.attr("height"))- margin.top - margin.bottom;
            const ethScale = d3.scaleOrdinal().domain(["afam", "hispanic", "other"]).range([margin.left, ethChartWidth/2, ethChartWidth-margin.left]);
            const ethScaleAxis = d3.scaleOrdinal().domain(["African American", "Hispanic", "Other"]).range([margin.left, ethChartWidth/2, ethChartWidth-margin.left]);

            const freqExtent = d3.extent(Object.values(eth));
            const freqScale = d3.scaleLinear().domain([0, freqExtent[1]]).range([ethChartHeight, 0]);

            let ethleftAxis = d3.axisLeft(freqScale)
            let ethleftGridlines = d3.axisLeft(freqScale)
                                  .tickSize(-ethChartWidth-10)
                                  .tickFormat("")
            eth_annotations.append("g")
              .attr("class", "y axis")
              .attr("transform",`translate(${margin.left},${margin.top})`)
              .call(ethleftAxis)
            eth_annotations.append("g")
              .attr("class", "y gridlines")
              .attr("transform",`translate(${margin.left-10},${margin.top})`)
              .call(ethleftGridlines);

              // X axis
              let ethbottomAxis = d3.axisBottom(ethScaleAxis)
              let ethbottomGridlines = d3.axisBottom(ethScale)
                                      .tickSize(-ethChartHeight-10)
                                      .tickFormat("")
              eth_annotations.append("g")
                .attr("class", "x axis")
                .attr("transform",`translate(${margin.left},${Number(ethChartHeight)+margin.top})`)
                .call(ethbottomAxis);
              eth_annotations.append("g")
                .attr("class", "x gridlines")
                .attr("transform",`translate(${margin.left},${Number(ethChartHeight)+margin.top})`)
                .call(ethbottomGridlines);

              let rects = eth_chartArea.selectAll("rect.all").data(ethdata)
                                      .join("rect")
                                      .attr("class", "all")
                                      .attr("label", d => d[0])
                                      .attr("amt", d => d[1])
                                      .attr("x", d => ethScale(d[0])-8)
                                      .attr("y", d => freqScale(d[1]))
                                      .attr("height", d => chartHeight - freqScale(d[1] - 250))
                                      .attr("width", 16)
                                      .attr("fill", "orange" );


              let rect_outlines = eth_outlineArea.selectAll("rect.fil").data(ethdata)
                                      .join("rect")
                                      .attr("class", "fil")
                                      .attr("label", d => d[0])
                                      .attr("amt", d => d[1])
                                      .attr("x", d => ethScale(d[0])-8)
                                      .attr("y", d => freqScale(d[1]))
                                      .attr("height", d => chartHeight - freqScale(d[1] - 250))
                                      .attr("width", 16)
                                      .attr("fill-opacity", "0" )
                                      .attr("stroke", 'black')
                                      .on("mouseover", function(d) {
                                        d3.select(this)
                                          .transition().duration(100)
                                          .attr("stroke-width", 3)

                                      })
                                      .on("mouseout", function(d) {
                                        d3.select(this)
                                          .transition().duration(100)
                                          .attr("stroke-width", 1)
                                      });

             d3.select("#eth_header").text(`${Math.round((eth["afam"]+eth["hispanic"])/(Object.keys(college_filtered).length)*100)}% of them were underrepresented minorities.`)



              // function to create circles
              function createCircles(chartArea, data, xScale, xCol) {
                  let circles = chartArea.selectAll("circle.point").data(data)
                  .join(enter => enter.append("circle")
                      .attr("class","point")
                      .attr("opacity", 0.8)
                      )
                  .attr("cx", d => xScale(d[xCol]))
                  .attr("cy", d => distanceScale(d['distance']))
                  .attr("r", 2)
                  .attr("fill", d => colorScale(d['gender']));
              }

              // add circles to main scatter plot
              createCircles(edu_chartArea, college_filtered, scoreScale, 'score')
              createCircles(bg_chartArea, college_filtered, wageScale, 'wage')


              function incomeCheck(condition, data) {
                if (condition == "all") {
                  return true
                } else {
                  return data.income == condition
                }
              }

              function wagesCheck(condition, data) {
                if (condition == "all") {
                  return true
                } else if (condition == "low"){
                  return data.wage < wage_dict["low"]
                } else if (condition == "medium") {
                  return data.wage >= wage_dict["low"] && data.wage < wage_dict["high"]
                } else {
                  return data.wage >= wage_dict["high"]
                }
              }

              function scoresCheck(condition, data) {
                if (condition == "all") {
                  return true
                } else if (condition == "low"){
                  return data.score < score_dict["low"]
                } else if (condition == "medium") {
                  return data.score >= score_dict["low"] && data.score < score_dict["high"]
                } else {
                  return data.score >= score_dict["high"]
                }
              }
              // code inspired from https://www.d3-graph-gallery.com/graph/line_filter.html
              // update scatter based on selection
              function update(dropdownDict) {
                  // filter dataset based on button selection
                  let scores = dropdownDict["#scores_selectButton"];
                  let income = dropdownDict["#income_selectButton"];
                  let wages = dropdownDict["#wages_selectButton"];

                  if (scores == "all" && wages == "all" && income == "all") {
                      var filtered = college_filtered;
                      d3.select("#home_header").text(`${Math.round(home["yes"]/Object.keys(filtered).length*100)}% of their families own homes`)
                      d3.select("#eth_header").text(`${Math.round((eth["afam"]+eth["hispanic"])/(Object.keys(filtered).length)*100)}% of them were underrepresented minorities.`)
                      d3.select("#ped_header").text(`${Math.round((one + both)/Object.keys(college_filtered).length*100, 2)}% of students had one or more parents that attended college.`)
                      ped_filterArea.attr("visibility", "hidden")
                      eth_filterArea.attr("visibility", "hidden")
                  }
                  else {
                      var filtered = college_filtered.filter(function(d){return incomeCheck(income, d) && wagesCheck(wages, d) && scoresCheck(scores, d)})
                      console.log(filtered)
                      var eth2 = {"hispanic": 0, "afam": 0, "other": 0}
                      var inc2 = {"low": 0, "high": 0}
                      var home2 = {"yes": 0, "no": 0}
                      var ped2 = {"mom": 0, "dad": 0, "both": 0, "neither": 0}

                      filtered.forEach((d, i) => {
                          eth2[d["ethnicity"]] += 1;
                          inc2[d["income"]] += 1;
                          home2[d["home"]] += 1;
                          if (d["fcollege"] == "yes" && d["mcollege"] == "yes") {
                            ped2["both"] += 1
                            ped2["mom"] += 1
                            ped2["dad"] += 1
                          } else if (d["fcollege"] == "yes") {
                            ped2["dad"] += 1
                          } else if (d["mcollege"] == "yes") {
                            ped2["mom"] += 1
                          }
                          else {
                            ped2["neither"] += 1
                          }
                      });

                      ped_filterArea.attr("visibility", "visible")
                      eth_filterArea.attr("visibility", "visible")
                      let ped_filter = ped_filterArea.selectAll("rect.filter").data(["none", "one", "both"])
                          .join("rect")
                          .attr("class", "filter")
                          .attr("x", d => ped_start(d))
                          .attr("y", 0)
                          .attr("width", d => ped_length(d, ped2))
                          .attr("height", 50)
                          .attr("fill", "pink")
                          .attr("id", d => d);

                      let rects_filter = eth_filterArea.selectAll("rect.filter").data(Object.entries(eth2))
                                              .join("rect")
                                              .attr("class", "filter")
                                              .attr("label", d => d[0])
                                              .attr("amt", d => d[1])
                                              .attr("x", d => ethScale(d[0])-8)
                                              .attr("y", d => freqScale(d[1]))
                                              .attr("height", d => chartHeight - freqScale(d[1] - 250))
                                              .attr("width", 16)
                                              .attr("fill", "pink" );

                      let one = ped2["dad"] + ped2["mom"] - ped2["both"] - ped2["both"]
                      let both = ped2["both"]
                      let none = ped2["neither"]
                      console.log(ped2)
                      d3.select("#home_header").text(`${Math.round(home2["yes"]/Object.keys(filtered).length*100)}% of their families own homes`)
                      d3.select("#eth_header").text(`${Math.round((eth2["afam"]+eth2["hispanic"])/(Object.keys(filtered).length)*100)}% of them were underrepresented minorities.`)
                      d3.select("#ped_header").text(`${Math.round((one + both)/Object.keys(filtered).length*100, 2)}% of students had one or more parents that attended college.`)
                      ped_fil_one.text(`${Math.round((one)/Object.keys(filtered).length*100, 2)}% of those students had one parent that attended college.`)
                      ped_fil_none.text(`${Math.round((none)/Object.keys(filtered).length*100, 2)}% of those students had no parents that attended college.`)
                      ped_fil_both.text(`${Math.round((both)/Object.keys(filtered).length*100, 2)}% of those students had two parents that attended college.`)
                  }
                  // give new data to circles
                  createCircles(edu_chartArea, filtered, scoreScale, 'score')
                  createCircles(bg_chartArea, filtered, wageScale, 'wage')
                  updateSideHeader(Object.keys(filtered).length)
              }

                function updateSideHeader(size) {
                  var incomeSelector = d3.select("#income_selectButton").property("value")
                  var scoreSelector = d3.select("#scores_selectButton").property("value")
                  var wageSelector = d3.select("#wages_selectButton").property("value")

                  let sideBarTitle = d3.select("#sideBarTitle")

                  if (incomeSelector == "all" && scoreSelector == "all" && wageSelector == "all") {
                    sideBarTitle.text("Among all students surveyed...")
                  } else {
                    incomeSelector = (incomeSelector == "all") ? "" : `from ${incomeSelector}-income families`
                    scoreSelector = (scoreSelector == "all") ? "" : `with ${scoreSelector} test scores`
                    wageSelector = (wageSelector == "all") ? "" : `in ${wageSelector}-income counties`
                    sideBarTitle.text(`There were ${size} students ${incomeSelector} ${scoreSelector} ${wageSelector} out of ${Object.keys(college_filtered).length}.`)
                  }
                }

                // when an option is selected, call update
                d3.select("#income_selectButton").on("change", function(d) {
                    // recover the option that has been chosen
                    var selectedOption = d3.select(this).property("value")
                    // run the updateChart function with this selected option
                    dropdownDict["#income_selectButton"] = selectedOption
                    update(dropdownDict)
                })
                d3.select("#scores_selectButton").on("change", function(d) {
                    // recover the option that has been chosen
                    var selectedOption = d3.select(this).property("value")
                    // run the updateChart function with this selected option
                    dropdownDict["#scores_selectButton"] = selectedOption
                    update(dropdownDict)
                })
                d3.select("#wages_selectButton").on("change", function(d) {
                    // recover the option that has been chosen
                    var selectedOption = d3.select(this).property("value")
                    // run the updateChart function with this selected option
                    dropdownDict["#wages_selectButton"] = selectedOption
                    update(dropdownDict)
                })
            };
            loadScatter();

        </script>
    </body>
</html>
