<html>
    <head>
        <meta charset="UTF-8">
        <script src="https://d3js.org/d3.v7.min.js"></script>
    </head>

    <!-- css styles -->
    <style>

    </style>
    
    <body>
        <!-- buttons -->
        <button type="button">low</button>
        <button type="button">high</button>

        <h1>Scores vs. Distance</h1>

        <!-- svg -->
        <svg id="edu_viz" height="350" width="500" style="margin:20px"></svg>

        <h1>Background vs. Distance</h2>

        <!-- svg -->
        <svg id="bg_viz" height="350" width="500" style="margin:20px"></svg>

        <script>
            // build map
        const loadScatter = async function() {

                // create scatter
                const edu_scatter = d3.select("#edu_viz");
                const bg_scatter = d3.select("#bg_viz");

                // width of both scatter plots are the same, given that their sizes are the same
                // code inspired by prof rz's notes in https://jeffrz.github.io/info4310-sp2022/notes/22.02.07.notes.htm
                const width = edu_scatter.attr("width");
                const height = edu_scatter.attr("height");
                const margin =  {top: 15, right: 15, bottom: 40, left: 50};
                const chartWidth = width - margin.left - margin.right;
                const chartHeight = height - margin.top - margin.right;

                let edu_annotations = edu_scatter.append("g").attr("id","annotations");
                let edu_chartArea = edu_scatter.append("g").attr("id","points")
                    .attr("transform","translate("+margin.left+","+margin.top+")");  

                let bg_annotations = bg_scatter.append("g").attr("id","annotations");
                let bg_chartArea = bg_scatter.append("g").attr("id","points")
                    .attr("transform","translate("+margin.left+","+margin.top+")");  

                // load dataset
                const college_csv = await d3.csv("CollegeDistance.csv");
                console.log(college_csv);

                // filter dataset
                // change types as necessary
                college_csv.forEach((d, i) => {
                    d['score'] = Number(d['score']);
                    d['urban'] = Number(d['urban']);
                    d['unemp'] = Number(d['unemp']);
                    d['wage'] = Number(d['wage']);
                    d['distance'] = Number(d['distance']);
                    d['tuition'] = Number(d['tuition']);
                    d['education'] = Number(d['education']);
                });

                // remove rows where education is not twelve (exclude non-seniors)
                college_filtered = college_csv.filter((d) => d["education"] === 12 );
                console.log(college_filtered);

                // create extent
                const scoreExtent = d3.extent(college_filtered, d => d['score']);
                const scoreScale = d3.scaleLinear().domain(scoreExtent).range([0, chartWidth]);
                const wageExtent = d3.extent(college_filtered, d => d['wage']);
                const wageScale = d3.scaleLinear().domain(wageExtent).range([0, chartWidth]);
                const distanceExtent = d3.extent(college_filtered, d => d['distance']);
                // tried doing a log scale but didn't return valid numbers
                const distanceScale = d3.scaleLinear().domain(distanceExtent).range([chartHeight, 0]);

                // create custom color scale for gender
                var colors = ["red", "blue"];
                const colorScale = d3.scaleOrdinal().domain(["gender"]).range(colors);

                let leftAxis = d3.axisLeft(distanceScale)
                    .tickFormat(d3.format(""));
                let leftGridlines = d3.axisLeft(distanceScale)
                    .tickSize(-chartWidth-10)
                    .tickFormat("");
                let edu_bottomAxis = d3.axisBottom(scoreScale)
                    .tickFormat(d3.format("~f"));  // exact value without commas
                let edu_bottomGridlines = d3.axisBottom(scoreScale)
                    .tickSize(-chartHeight-10)
                    .tickFormat("");

                let bg_bottomAxis = d3.axisBottom(wageScale)
                    .tickFormat(d3.format("~f"));  // exact value without commas
                let bg_bottomGridlines = d3.axisBottom(wageScale)
                    .tickSize(-chartHeight-10)
                    .tickFormat("");
                
            // create axes and gridlines
            edu_annotations.append("g")
                .attr("class", "y axis")
                .attr("transform",`translate(${margin.left-10},${margin.top})`)
                .call(leftAxis);
            edu_annotations.append("g")
                .attr("class", "y gridlines")
                .attr("transform",`translate(${margin.left-10},${margin.top})`)
                .call(leftGridlines);
            edu_annotations.append("g")
                .attr("class", "x axis")
                .attr("transform",`translate(${margin.left},${chartHeight+margin.top-5})`)
                .call(edu_bottomAxis);
            edu_annotations.append("g")
                .attr("class", "x gridlines")
                .attr("transform",`translate(${margin.left},${chartHeight+margin.top-5})`)
                .call(edu_bottomGridlines);

            bg_annotations.append("g")
                .attr("class", "y axis")
                .attr("transform",`translate(${margin.left-10},${margin.top})`)
                .call(leftAxis);
            bg_annotations.append("g")
                .attr("class", "y gridlines")
                .attr("transform",`translate(${margin.left-10},${margin.top})`)
                .call(leftGridlines);
            bg_annotations.append("g")
                .attr("class", "x axis")
                .attr("transform",`translate(${margin.left},${chartHeight+margin.top-5})`)
                .call(bg_bottomAxis);
            bg_annotations.append("g")
                .attr("class", "x gridlines")
                .attr("transform",`translate(${margin.left},${chartHeight+margin.top-5})`)
                .call(bg_bottomGridlines);

            // add circles
            let edu_circles = edu_chartArea.selectAll("circle.point").data(college_filtered)
                .join(enter => enter.append("circle")
                    .attr("class","point")
                    .attr("opacity", 0.8)
                    )
                .attr("cx", d => scoreScale(d['score']))
                .attr("cy", d => distanceScale(d['distance']))
                .attr("r", 2)
                .attr("fill", d => colorScale(d['gender']));

            let bg_circles = bg_chartArea.selectAll("circle.point").data(college_filtered)
                .join(enter => enter.append("circle")
                    .attr("class","point")
                    .attr("opacity", 0.8)
                    )
                .attr("cx", d => wageScale(d['wage']))
                .attr("cy", d => distanceScale(d['distance']))
                .attr("r", 2)
                .attr("fill", d => colorScale(d['gender']));
            };
            loadScatter();

        </script>
    </body>
</html>